tool:
  name: frontend_to_recommendation_engine
  description: >
    Get personalized product recommendations for a user based on their browsing history and preferences.
  type: recommendation_engine
  version: 1.0
  parameters:
    type: object
    properties:
      user_id:
        type: string
        description: The unique identifier of the user.
      browsing_history:
        type: array
        items:
          type: string
        description: List of product IDs the user has recently viewed.
      limit:
        type: integer
        description: Maximum number of recommendations to return.
        default: 10
      category:
        type: string
        description: Specific category to focus recommendations on.
    additional_properties: false
    required:
      - user_id
  response:
    type: object
    properties:
      recommendations:
        type: array
        description: A list of recommended products.
        items:
          type: object
          properties:
            product_id:
              type: string
              description: Unique identifier for the product.
            name:
              type: string
              description: Name of the product.
            price:
              type: number
              description: Price of the product.
            image_url:
              type: string
              format: uri
              description: URL to the product image.
            relevance_score:
              type: number
              description: Score indicating the relevance of the recommendation.
  sub_tools:
    - collaborative_filtering
    - content_based_filtering
    - hybrid_recommendation
    - real_time_personalization
    - re-ranking
    - inventory_check
    - /Users/macadelic/toolchains/e-commerce/inventory/inbound_inventory_management/detector/detect_from_image.yaml
  rate_limit:
    requests_per_minute: 60
    burst_capacity: 10
  error_handling:
    - code: 400
      message: Bad Request - Invalid parameters.
    - code: 401
      message: Unauthorized - Invalid or missing authentication token.
    - code: 404
      message: Not Found - No recommendations available.
    - code: 500
      message: Internal Server Error - Unexpected server error.

frontend:
  name: RecommendationEngineInterface
  description: >
    User interface for providing user ID, browsing history, selecting recommendation parameters,
    and displaying personalized product recommendations.
  layout:
    type: form
    action: /api/recommendations
    method: POST
    enctype: application/json
    components:
      - type: text_input
        name: user_id
        label: User ID
        placeholder: Enter your unique user ID
        required: true
        validation:
          type: string
          pattern: "^[a-zA-Z0-9_-]{3,20}$"
          error_message: "User ID must be 3-20 characters long and can include letters, numbers, underscores, or hyphens."
        description: >
          The unique identifier assigned to each user. This ID is used to fetch personalized recommendations.

      - type: multi_select
        name: browsing_history
        label: Browsing History
        options:
          - label: Product 1
            value: P001
          - label: Product 2
            value: P002
          - label: Product 3
            value: P003
          - label: Product 4
            value: P004
          - label: Product 5
            value: P005
        required: true
        validation:
          type: array
          min_items: 1
          error_message: "Please select at least one product ID."
        description: >
          A list of product IDs that the user has recently viewed. Helps in generating more accurate recommendations.

      - type: number_input
        name: limit
        label: Number of Recommendations
        min: 1
        max: 50
        default: 10
        required: false
        validation:
          type: integer
          minimum: 1
          maximum: 50
          error_message: "Please enter a number between 1 and 50."
        description: >
          Specifies the maximum number of product recommendations to return.

      - type: dropdown
        name: category
        label: Category (Optional)
        options:
          - label: All Categories
            value: all
          - label: Electronics
            value: electronics
          - label: Books
            value: books
          - label: Clothing
            value: clothing
          - label: Home & Kitchen
            value: home_kitchen
        required: false
        validation:
          type: string
          enum: [ all, electronics, books, clothing, home_kitchen ]
          error_message: "Please select a valid category."
        description: >
          Select a specific category to focus the recommendations. Selecting "All Categories" will include products from all categories.

      - type: submit_button
        text: Get Recommendations
        style: primary
  response_handling:
    type: display
    components:
      - type: conditional
        condition: "recommendations.length > 0"
        components:
          - type: section
            label: Recommended Products
            components:
              - type: grid
                columns: 3
                gap: 20px
                items:
                  - type: card
                    components:
                      - type: image
                        src: "{{ item.image_url }}"
                        alt: "{{ item.name }}"
                        class: "product-image"
                      - type: text
                        content: "{{ item.name }}"
                        class: "product-name"
                      - type: text
                        content: "Price: ${{ item.price }}"
                        class: "product-price"
                      - type: text
                        content: "Relevance: {{ (item.relevance_score * 100).toFixed(2) }}%"
                        class: "product-relevance"
      - type: conditional
        condition: "recommendations.length === 0"
        components:
          - type: alert
            variant: warning
            content: "No recommendations available based on the provided information."
      - type: section
        label: Total Recommendations
        components:
          - type: text
            content: "Total Recommendations: {{ recommendations.length }}"
            class: "total-recommendations"
  validations:
    - field: user_id
      validations:
        - required: true
        - type: string
        - regex: "^[a-zA-Z0-9_-]{3,20}$"
        - error_message: "User ID must be 3-20 characters long and can include letters, numbers, underscores, or hyphens."
    - field: browsing_history
      validations:
        - required: true
        - type: array
        - min_items: 1
        - error_message: "Please select at least one product ID."
    - field: limit
      validations:
        - type: integer
        - min: 1
        - max: 50
        - error_message: "Please enter a number between 1 and 50."
    - field: category
      validations:
        - type: string
        - enum: [ all, electronics, books, clothing, home_kitchen ]
        - error_message: "Please select a valid category."
  error_handling:
    type: alert
    components:
      - type: text
        content: "An error occurred while fetching recommendations. Please try again later."
        class: "error-message"

backend:
  name: FrontendToRecommendationEngineBackend
  description: >
    Backend service for processing recommendation requests, integrating various sub-tools to generate personalized product recommendations.
  endpoint: /api/recommendations
  method: POST
  authentication:
    type: bearer
    token: YOUR_API_TOKEN_HERE  # Replace with your actual token or method
  parameters:
    type: object
    properties:
      user_id:
        type: string
        description: The unique identifier of the user.
      browsing_history:
        type: array
        items:
          type: string
        description: List of product IDs the user has recently viewed.
      limit:
        type: integer
        description: Maximum number of recommendations to return.
        default: 10
      category:
        type: string
        description: Specific category to focus recommendations on.
    additional_properties: false
    required:
      - user_id
  processing_steps:
    - step: authenticate_request
      description: Verify the bearer token for authorized access.
    - step: validate_parameters
      description: Ensure all required parameters are present and valid.
    - step: fetch_user_preferences
      description: Retrieve user preferences and historical data from the database.
    - step: execute_sub_tools
      description: Run sub-tools to generate recommendations.
      sub_tools:
        - collaborative_filtering
        - content_based_filtering
        - hybrid_recommendation
        - real_time_personalization
        - re-ranking
        - inventory_check
        - /Users/macadelic/toolchains/e-commerce/inventory/inbound_inventory_management/detector/detect_from_image.yaml
    - step: aggregate_recommendations
      description: Combine and process recommendations from all sub-tools.
    - step: apply_rate_limiting
      description: Ensure the request complies with rate limiting policies.
    - step: format_response
      description: Structure the recommendations into the defined response format.
  response:
    type: object
    properties:
      recommendations:
        type: array
        description: A list of recommended products.
        items:
          type: object
          properties:
            product_id:
              type: string
              description: Unique identifier for the product.
            name:
              type: string
              description: Name of the product.
            price:
              type: number
              description: Price of the product.
            image_url:
              type: string
              format: uri
              description: URL to the product image.
            relevance_score:
              type: number
              description: Score indicating the relevance of the recommendation.
  sub_tools:
    - collaborative_filtering
    - content_based_filtering
    - hybrid_recommendation
    - real_time_personalization
    - re-ranking
    - inventory_check
    - /Users/macadelic/toolchains/e-commerce/inventory/inbound_inventory_management/detector/detect_from_image.yaml
  rate_limit:
    requests_per_minute: 60
    burst_capacity: 10
  error_handling:
    - code: 400
      message: Bad Request - Invalid parameters.
    - code: 401
      message: Unauthorized - Invalid or missing authentication token.
    - code: 404
      message: Not Found - No recommendations available.
    - code: 500
      message: Internal Server Error - Unexpected server error.

integration:
  name: FrontendToRecommendationEngineIntegration
  description: >
    Integration settings connecting the frontend interface with the backend recommendation engine.
  dependencies:
    frontend:
      - path: /e-commerce/catalog/products/recommendation_engine/frontend_to_recommendation_engine_frontend.yaml
    backend:
      - path: /e-commerce/catalog/products/recommendation_engine/frontend_to_recommendation_engine_backend.yaml
  api_endpoints:
    - name: get_recommendations
      frontend_path: /e-commerce/catalog/products/recommendation_engine/frontend_to_recommendation_engine_frontend.yaml
      backend_path: /e-commerce/catalog/products/recommendation_engine/frontend_to_recommendation_engine_backend.yaml
      method: POST
      frontend_action: submit_form
      backend_handler: process_recommendations
  authentication:
    type: bearer
    token: YOUR_API_TOKEN_HERE  # Ensure both frontend and backend use the same token
  data_flow:
    - source: frontend
      target: backend
      action: Submit recommendation request
      data_transformation: >
        Convert form data into JSON payload matching backend parameters.
    - source: backend
      target: frontend
      action: Return recommendations
      data_transformation: >
        Format backend response into frontend display components.
  error_propagation:
    - backend_error:
        condition: "error_code == 400"
        frontend_response: "Bad Request - Please check your inputs."
    - backend_error:
        condition: "error_code == 401"
        frontend_response: "Unauthorized - Please log in."
    - backend_error:
        condition: "error_code == 404"
        frontend_response: "No recommendations found."
    - backend_error:
        condition: "error_code == 500"
        frontend_response: "Server error - Please try again later."
  testing:
    - type: unit
      description: Test individual frontend components and backend handlers.
    - type: integration
      description: Ensure frontend and backend communicate correctly.
    - type: performance
      description: Validate rate limiting and response times.
